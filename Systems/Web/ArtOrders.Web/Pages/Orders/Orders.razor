@page "/orders"

@layout MainLayout

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IOrderService orderService
@inject NavigationManager navigationManager

<MudText Typo="Typo.h4" Class="ma-8">Orders</MudText>

<MudTable Items="@OrderListItems" Class="ma-8" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<OrderListItem,bool>(FilterFuncSimple)">
    <ColGroup>
        <col style="width:50px;" />
        <col />
        <col />
        <col />
        <col style="width:100px;" />
    </ColGroup>
    <ToolBarContent>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => AddOrder())">Add</MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Description</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Status">@OrderStatusTranslater.dictionary[context.Status]</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => EditOrder(context.Id))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@((e) => DeleteOrder(context.Id))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    // TODO: Переделать Orders.razor!!!

    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;

    private string searchString = "";

    private IEnumerable<OrderListItem> OrderListItems = new List<OrderListItem>();

    private async Task ReloadData()
    {
        OrderListItems = await orderService.GetOrders(0, 10000);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error); //Всплывающие уведомления в левом нижнем углу
        }
    }

    private bool FilterFuncSimple(OrderListItem OrderListItem) => FilterFunc(OrderListItem, searchString);

    private bool FilterFunc(OrderListItem OrderListItem, string searchString)
    {
        return
            string.IsNullOrWhiteSpace(searchString)
            ||
            OrderListItem.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ||
            OrderListItem.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ||
            OrderListItem.Description.Contains(searchString)
        ;
    }

    // TODO: Тут должно быть запихивание ID Художника и Клиента, и вообще из другого места!...
    // TODO: Сделать тут создание Чата!!!!!!!!! (Или........)
    private async Task AddOrder()
    {
        var parameters = new DialogParameters { };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = DialogService.Show<OrderDialog>("Add order", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await orderService.AddOrder(((OrderDialog)dialog.Dialog).model);
            await ReloadData();
        }
    }

    // TODO: Это должны быть разные диалоги.... Так что это для теста!!!!!......
    private async Task EditOrder(int orderId)
    {
        var parameters = new DialogParameters();
        parameters.Add("OrderId", orderId);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<OrderDialog>("Edit order", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await orderService.EditOrder(orderId, ((OrderDialog)dialog.Dialog).model);
            await ReloadData();
        }
    }

    private async Task DeleteOrder(int orderId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this order? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete order", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await orderService.DeleteOrder(orderId);
            await ReloadData();
        }
    }
}
